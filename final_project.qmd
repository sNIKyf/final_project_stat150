---
title: "Final_project"
format: html
editor: visual
---

```{r}
#| label: setup
#| include: FALSE

library(pacman)

pacman::p_load(
  tidyverse,
  sf,
  arrow,
  lubridate,
  tidygeocoder,
  janitor,
  googledrive
)

```

```{r}
#| label: data_import

taxi_data_green <- read_parquet("Data/green_tripdata_2025-05.parquet")

taxi_data_yellow <- read_parquet("Data/yellow_tripdata_2025-05.parquet")

yellow_and_green <- bind_rows(taxi_data_green, taxi_data_yellow)

event_data <- read_csv("Data/NYC_Event_Information_Historical_05.2025.csv") |> 
  clean_names() |>
  distinct()

taxi_zones <- read_sf("Data/taxi_zones/taxi_zones.shp")

event_data #|> 
  #head (10) |> 
  #view()

```

!Do not run this code chunk

```{r}
#| label: adresses_into_coordinates

#This is how I converted the adresess data into coordinates using an API and put it into a seperate csv(Do not run this part)

options(tidygeocoder.user_agent = "My University Project <nbezverkhyi@kse.org.ua>")
event_data_coord <- event_data |>
  geocode(address = event_location, method = 'osm')

event_data_coord_pulled <- event_data_coord |>
  filter(!is.na(lat))

write_csv(event_data_coord_pulled, "NYC_Event_Information_Historical_05.2025_coordinates_v2.csv")

```

```{r}
#| label: event_dataset
event_data_final <- read_csv("Data/NYC_Event_Information_Historical_05.2025_coordinates.csv")
  
event_data_final <- event_data_final |> 
  distinct() |> 
  select(-c(event_agency, event_type, event_borough, event_street_side, street_closure_type, community_board, police_precinct)) 

event_data_final |>
  #head(10) |>
  view()

yellow_and_green |>
  head(10) |>
  view()
```

```{r}
#| label: data preparing and merging


taxi_data <- yellow_and_green |>
  mutate(
    tpep_pickup_datetime = ymd_hms(tpep_pickup_datetime),
    tpep_dropoff_datetime = ymd_hms(tpep_dropoff_datetime)
  ) |> 
  select(
    tpep_pickup_datetime,
    tpep_dropoff_datetime,
    PULocationID,
    DOLocationID,
    total_amount
  ) |>
  filter(!is.na(tpep_dropoff_datetime)) |> 
  view()

event_data_final <- event_data_final |> 
  mutate(
    start_date_time = mdy_hms(start_date_time),
    end_date_time = mdy_hms(end_date_time)
  ) |> 
  st_as_sf(coords = c("long", "lat"), crs = 4326) |>
  st_transform(st_crs(taxi_zones)) |>
  st_join(taxi_zones) |> 
  select( -c(OBJECTID, event_location, event_name, zone, borough)) |> 
  filter(!is.na(LocationID)) |> 
  mutate(
    arrival_window_start = start_date_time - minutes(15), #проміжок часу за який людина може приїхати на подію на таксі
    arrival_window_end   = start_date_time + minutes(5),
    depart_window_start  = end_date_time - minutes(5), #аналогічно для відʼїзду
    depart_window_end    = end_date_time + minutes(15)
  ) |> 
  view()

arrivals <- inner_join(
  taxi_data,
  event_data_final,
  by = join_by(DOLocationID == LocationID, between(tpep_dropoff_datetime, arrival_window_start, arrival_window_end)
  )
) |> 
  mutate(match_type = "Arrival")
  
departures <- inner_join(
  taxi_data,
  event_data_final,
  by = join_by(PULocationID == LocationID, between(tpep_pickup_datetime, depart_window_start, depart_window_end)
  )
) |> 
  mutate(match_type = "Departure")

related_trips <- bind_rows(arrivals, departures) |> 
  view()

event_revenue <- departures |>
  summarise(total_revenue = sum(total_amount), geometry, Shape_Leng, Shape_Area, .by = event_id) |>
  distinct() |>
  mutate(total_revenue_p = round(total_revenue * 100 / sum(total_revenue), digits = 2)) |>
  view()

```
